-- Script de inicialização do Oracle Database
-- Sistema de Gestão de Agentes Voluntários v2.0
-- Compatível com Oracle Cloud Infrastructure (OCI)

ALTER SESSION SET CONTAINER = CDB$ROOT;
SET PAGESIZE 0;
SET FEEDBACK OFF;
SET ECHO ON;

CREATE USER agentes_user IDENTIFIED BY agentes_pass;
GRANT CONNECT, RESOURCE, CREATE SESSION, CREATE TABLE, CREATE VIEW,
      CREATE PROCEDURE, CREATE TRIGGER, CREATE SYNONYM TO agentes_user;
ALTER USER agentes_user QUOTA UNLIMITED ON DATA;
GRANT CREATE JOB TO agentes_user;
GRANT MANAGE SCHEDULER TO agentes_user;

-- CONNECT agentes_user/agentes_pass@agentes-db_high;

CREATE TABLE comarca (
    id_comarca        VARCHAR2(36) PRIMARY KEY,
    nome_comarca      VARCHAR2(255) NOT NULL UNIQUE
);

CREATE TABLE area_atuacao (
    id_area_atuacao   VARCHAR2(36) PRIMARY KEY,
    nome_area_atuacao VARCHAR2(255) NOT NULL UNIQUE
);

CREATE TABLE agente_voluntario (
    id_agente                  VARCHAR2(36) PRIMARY KEY,
    nome_completo              VARCHAR2(255) NOT NULL,
    cpf                        VARCHAR2(11) NOT NULL UNIQUE,
    telefone                   VARCHAR2(20) NOT NULL,
    email                      VARCHAR2(255) NOT NULL,
    foto                       BLOB,
    numero_carteira_identidade VARCHAR2(20),
    data_expedicao_ci          DATE,
    nacionalidade              VARCHAR2(50),
    naturalidade               VARCHAR2(100),
    uf                         VARCHAR2(2),
    data_nascimento            DATE,
    filiacao_pai               VARCHAR2(255),
    filiacao_mae               VARCHAR2(255),
    data_cadastro              TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    usuario_cadastro           VARCHAR2(100) NOT NULL,
    status                     VARCHAR2(20) DEFAULT 'EM_ANALISE' NOT NULL,
    disponibilidade            VARCHAR2(500)
);

CREATE TABLE credencial (
    id_credencial   VARCHAR2(36) PRIMARY KEY,
    id_agente       VARCHAR2(36) NOT NULL,
    data_emissao    TIMESTAMP NOT NULL,
    qr_code_url     VARCHAR2(500) NOT NULL,
    usuario_emissao VARCHAR2(100) NOT NULL,
    CONSTRAINT fk_credencial_agente FOREIGN KEY (id_agente)
        REFERENCES agente_voluntario(id_agente)
);

CREATE TABLE auto_infracao (
    id                        VARCHAR2(36) PRIMARY KEY,
    agente_id                 VARCHAR2(36) NOT NULL,
    nome_autuado              VARCHAR2(200) NOT NULL,
    cpf_cnpj_autuado          VARCHAR2(18) NOT NULL,
    endereco_autuado          VARCHAR2(500) NOT NULL,
    contato_autuado           VARCHAR2(100) NOT NULL,
    nome_agente               VARCHAR2(200) NOT NULL,
    matricula_agente          VARCHAR2(50) NOT NULL,
    comarca_id                VARCHAR2(36) NOT NULL,
    base_legal                VARCHAR2(1000) NOT NULL,
    data_infracao             DATE NOT NULL,
    hora_infracao             TIMESTAMP NOT NULL,
    local_infracao            VARCHAR2(500) NOT NULL,
    descricao_conduta         VARCHAR2(2000) NOT NULL,
    iniciais_crianca          VARCHAR2(10),
    idade_crianca             NUMBER(3),
    sexo_crianca              VARCHAR2(1),
    nome_testemunha           VARCHAR2(200),
    cpf_testemunha            VARCHAR2(14),
    assinatura_autuado        NUMBER(1),
    status                    VARCHAR2(20) DEFAULT 'RASCUNHO' NOT NULL,
    data_cadastro             TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao          TIMESTAMP,
    usuario_cadastro          VARCHAR2(100) NOT NULL,
    usuario_atualizacao       VARCHAR2(100),
    data_cancelamento         TIMESTAMP,
    usuario_cancelamento      VARCHAR2(100),
    justificativa_cancelamento VARCHAR2(500),
    CONSTRAINT fk_auto_agente FOREIGN KEY (agente_id)
        REFERENCES agente_voluntario(id_agente),
    CONSTRAINT fk_auto_comarca FOREIGN KEY (comarca_id)
        REFERENCES comarca(id_comarca)
);

CREATE TABLE anexo_auto_infracao (
    id                NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    auto_infracao_id  VARCHAR2(36) NOT NULL,
    nome_arquivo      VARCHAR2(255) NOT NULL,
    nome_original     VARCHAR2(255) NOT NULL,
    tipo_arquivo      VARCHAR2(100) NOT NULL,
    tamanho_arquivo   NUMBER(19) NOT NULL,
    caminho_arquivo   VARCHAR2(500) NOT NULL,
    descricao         VARCHAR2(500),
    data_upload       TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    usuario_upload    VARCHAR2(100) NOT NULL,
    CONSTRAINT fk_anexo_auto FOREIGN KEY (auto_infracao_id)
        REFERENCES auto_infracao(id)
);

CREATE TABLE log_auditoria (
    id_log        VARCHAR2(36) PRIMARY KEY,
    data_hora     TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    usuario       VARCHAR2(100) NOT NULL,
    tipo_operacao VARCHAR2(50) NOT NULL,
    detalhes      CLOB,
    ip_origem     VARCHAR2(45)
);

CREATE TABLE log_auditoria_auto_infracao (
    id               NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    auto_infracao_id VARCHAR2(36) NOT NULL,
    tipo_operacao    VARCHAR2(50) NOT NULL,
    usuario          VARCHAR2(100) NOT NULL,
    perfil_usuario   VARCHAR2(50),
    data_operacao    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    endereco_ip      VARCHAR2(100),
    detalhes         CLOB,
    justificativa    VARCHAR2(500),
    sucesso          NUMBER(1) DEFAULT 1,
    mensagem_erro    VARCHAR2(500),
    CONSTRAINT fk_log_auto FOREIGN KEY (auto_infracao_id)
        REFERENCES auto_infracao(id)
);

CREATE TABLE agente_comarca (
    id_agente  VARCHAR2(36) NOT NULL,
    id_comarca VARCHAR2(36) NOT NULL,
    PRIMARY KEY (id_agente, id_comarca),
    CONSTRAINT fk_agente_comarca_agente FOREIGN KEY (id_agente)
        REFERENCES agente_voluntario(id_agente),
    CONSTRAINT fk_agente_comarca_comarca FOREIGN KEY (id_comarca)
        REFERENCES comarca(id_comarca)
);

CREATE TABLE agente_area_atuacao (
    id_agente       VARCHAR2(36) NOT NULL,
    id_area_atuacao VARCHAR2(36) NOT NULL,
    PRIMARY KEY (id_agente, id_area_atuacao),
    CONSTRAINT fk_agente_area_agente FOREIGN KEY (id_agente)
        REFERENCES agente_voluntario(id_agente),
    CONSTRAINT fk_agente_area_area FOREIGN KEY (id_area_atuacao)
        REFERENCES area_atuacao(id_area_atuacao)
);

CREATE INDEX idx_agente_cpf ON agente_voluntario(cpf);
CREATE INDEX idx_agente_email ON agente_voluntario(email);
CREATE INDEX idx_agente_status ON agente_voluntario(status);
CREATE INDEX idx_agente_data_cadastro ON agente_voluntario(data_cadastro);
CREATE INDEX idx_credencial_agente ON credencial(id_agente);
CREATE INDEX idx_auto_agente ON auto_infracao(agente_id);
CREATE INDEX idx_auto_comarca ON auto_infracao(comarca_id);
CREATE INDEX idx_auto_status ON auto_infracao(status);
CREATE INDEX idx_auto_data_infracao ON auto_infracao(data_infracao);
CREATE INDEX idx_auto_autuado ON auto_infracao(nome_autuado);
CREATE INDEX idx_auto_cpf_cnpj ON auto_infracao(cpf_cnpj_autuado);
CREATE INDEX idx_anexo_auto ON anexo_auto_infracao(auto_infracao_id);
CREATE INDEX idx_anexo_data_upload ON anexo_auto_infracao(data_upload);
CREATE INDEX idx_log_usuario ON log_auditoria(usuario);
CREATE INDEX idx_log_data ON log_auditoria(data_hora);
CREATE INDEX idx_log_auto_id ON log_auditoria_auto_infracao(auto_infracao_id);
CREATE INDEX idx_log_auto_usuario ON log_auditoria_auto_infracao(usuario);
CREATE INDEX idx_log_auto_data ON log_auditoria_auto_infracao(data_operacao);

INSERT INTO comarca (id_comarca, nome_comarca) VALUES (SYS_GUID(), 'Abaeté');
INSERT INTO comarca (id_comarca, nome_comarca) VALUES (SYS_GUID(), 'Abre-Campo');

INSERT INTO area_atuacao (id_area_atuacao, nome_area_atuacao)
  VALUES (SYS_GUID(), 'Proteção à Criança e Adolescente');
INSERT INTO area_atuacao (id_area_atuacao, nome_area_atuacao)
  VALUES (SYS_GUID(), 'Educação e Ensino');

CREATE OR REPLACE TRIGGER trg_agente_auditoria
    AFTER INSERT OR UPDATE OR DELETE ON agente_voluntario
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO log_auditoria (id_log, usuario, tipo_operacao, detalhes)
        VALUES (SYS_GUID(), USER, 'INSERT',
                'Novo agente cadastrado: ' || :NEW.nome_completo);
    ELSIF UPDATING THEN
        INSERT INTO log_auditoria (id_log, usuario, tipo_operacao, detalhes)
        VALUES (SYS_GUID(), USER, 'UPDATE',
                'Agente atualizado: ' || :NEW.nome_completo);
    ELSIF DELETING THEN
        INSERT INTO log_auditoria (id_log, usuario, tipo_operacao, detalhes)
        VALUES (SYS_GUID(), USER, 'DELETE',
                'Agente removido: ' || :OLD.nome_completo);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_auto_infracao_auditoria
    AFTER INSERT OR UPDATE OR DELETE ON auto_infracao
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO log_auditoria_auto_infracao
            (auto_infracao_id, tipo_operacao, usuario, detalhes)
        VALUES (:NEW.id, 'CREATE', USER, 'Auto de infração criado');
    ELSIF UPDATING THEN
        INSERT INTO log_auditoria_auto_infracao
            (auto_infracao_id, tipo_operacao, usuario, detalhes)
        VALUES (:NEW.id, 'UPDATE', USER, 'Auto de infração atualizado');
    ELSIF DELETING THEN
        INSERT INTO log_auditoria_auto_infracao
            (auto_infracao_id, tipo_operacao, usuario, detalhes)
        VALUES (:OLD.id, 'DELETE', USER, 'Auto de infração removido');
    END IF;
END;
/

COMMIT;
