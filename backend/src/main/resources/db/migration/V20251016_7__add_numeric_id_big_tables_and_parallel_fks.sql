-- V20251016_7__add_numeric_id_big_tables_and_parallel_fks.sql
-- Troca progressiva de PK VARCHAR2 -> NUMBER com SEQUENCE + triggers,
-- mantendo *_ID_STR como UNIQUE e criando FKs paralelas numéricas (sem downtime).

-- =============================
-- ESTABELECIMENTO
-- =============================
DECLARE v INTEGER; BEGIN
  -- Coluna ID NUMBER
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='ESTABELECIMENTO' AND COLUMN_NAME='ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE ESTABELECIMENTO ADD (ID NUMBER(19))'; END IF;
  -- Sequência
  SELECT COUNT(*) INTO v FROM USER_SEQUENCES WHERE SEQUENCE_NAME='S_ESTABELECIMENTO';
  IF v=0 THEN EXECUTE IMMEDIATE 'CREATE SEQUENCE S_ESTABELECIMENTO START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; END IF;
  -- Backfill IDs
  BEGIN EXECUTE IMMEDIATE 'UPDATE ESTABELECIMENTO SET ID = S_ESTABELECIMENTO.NEXTVAL WHERE ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  -- Trigger
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER TR_BIR_EST01 BEFORE INSERT ON ESTABELECIMENTO FOR EACH ROW BEGIN IF :NEW.ID IS NULL THEN :NEW.ID := S_ESTABELECIMENTO.NEXTVAL; END IF; END;';
  -- String key
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='ESTABELECIMENTO' AND COLUMN_NAME='ID_ESTABELECIMENTO_STR';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE ESTABELECIMENTO ADD (ID_ESTABELECIMENTO_STR VARCHAR2(255))'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE ESTABELECIMENTO SET ID_ESTABELECIMENTO_STR = RAWTOHEX(SYS_GUID()) WHERE ID_ESTABELECIMENTO_STR IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE ESTABELECIMENTO ADD CONSTRAINT UK_ESTAB_IDSTR UNIQUE (ID_ESTABELECIMENTO_STR)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- =============================
-- RESPONSAVEL
-- =============================
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='RESPONSAVEL' AND COLUMN_NAME='ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE RESPONSAVEL ADD (ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_SEQUENCES WHERE SEQUENCE_NAME='S_RESPONSAVEL';
  IF v=0 THEN EXECUTE IMMEDIATE 'CREATE SEQUENCE S_RESPONSAVEL START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE RESPONSAVEL SET ID = S_RESPONSAVEL.NEXTVAL WHERE ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER TR_BIR_RES01 BEFORE INSERT ON RESPONSAVEL FOR EACH ROW BEGIN IF :NEW.ID IS NULL THEN :NEW.ID := S_RESPONSAVEL.NEXTVAL; END IF; END;';
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='RESPONSAVEL' AND COLUMN_NAME='ID_RESPONSAVEL_STR';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE RESPONSAVEL ADD (ID_RESPONSAVEL_STR VARCHAR2(255))'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE RESPONSAVEL SET ID_RESPONSAVEL_STR = RAWTOHEX(SYS_GUID()) WHERE ID_RESPONSAVEL_STR IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE RESPONSAVEL ADD CONSTRAINT UK_RESP_IDSTR UNIQUE (ID_RESPONSAVEL_STR)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- =============================
-- TESTEMUNHA
-- =============================
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='TESTEMUNHA' AND COLUMN_NAME='ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE TESTEMUNHA ADD (ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_SEQUENCES WHERE SEQUENCE_NAME='S_TESTEMUNHA';
  IF v=0 THEN EXECUTE IMMEDIATE 'CREATE SEQUENCE S_TESTEMUNHA START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE TESTEMUNHA SET ID = S_TESTEMUNHA.NEXTVAL WHERE ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER TR_BIR_TES01 BEFORE INSERT ON TESTEMUNHA FOR EACH ROW BEGIN IF :NEW.ID IS NULL THEN :NEW.ID := S_TESTEMUNHA.NEXTVAL; END IF; END;';
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='TESTEMUNHA' AND COLUMN_NAME='ID_TESTEMUNHA_STR';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE TESTEMUNHA ADD (ID_TESTEMUNHA_STR VARCHAR2(255))'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE TESTEMUNHA SET ID_TESTEMUNHA_STR = RAWTOHEX(SYS_GUID()) WHERE ID_TESTEMUNHA_STR IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE TESTEMUNHA ADD CONSTRAINT UK_TEST_IDSTR UNIQUE (ID_TESTEMUNHA_STR)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- =============================
-- AUTO_INFRACAO
-- =============================
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO' AND COLUMN_NAME='ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO ADD (ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_SEQUENCES WHERE SEQUENCE_NAME='S_AUTO_INFRACAO';
  IF v=0 THEN EXECUTE IMMEDIATE 'CREATE SEQUENCE S_AUTO_INFRACAO START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE AUTO_INFRACAO SET ID = S_AUTO_INFRACAO.NEXTVAL WHERE ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER TR_BIR_AIN01 BEFORE INSERT ON AUTO_INFRACAO FOR EACH ROW BEGIN IF :NEW.ID IS NULL THEN :NEW.ID := S_AUTO_INFRACAO.NEXTVAL; END IF; END;';
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO' AND COLUMN_NAME='ID_AUTO_INFRACAO_STR';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO ADD (ID_AUTO_INFRACAO_STR VARCHAR2(255))'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE AUTO_INFRACAO SET ID_AUTO_INFRACAO_STR = RAWTOHEX(SYS_GUID()) WHERE ID_AUTO_INFRACAO_STR IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX UX_AUTO_ID_STR ON AUTO_INFRACAO (ID_AUTO_INFRACAO_STR)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- =============================
-- MENOR_ENVOLVIDO (garante ID numérico e business key)
-- =============================
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='MENOR_ENVOLVIDO' AND COLUMN_NAME='ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE MENOR_ENVOLVIDO ADD (ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_SEQUENCES WHERE SEQUENCE_NAME='S_MENOR_ENVOLVIDO';
  IF v=0 THEN EXECUTE IMMEDIATE 'CREATE SEQUENCE S_MENOR_ENVOLVIDO START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE MENOR_ENVOLVIDO SET ID = S_MENOR_ENVOLVIDO.NEXTVAL WHERE ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER TR_BIR_MEN01 BEFORE INSERT ON MENOR_ENVOLVIDO FOR EACH ROW BEGIN IF :NEW.ID IS NULL THEN :NEW.ID := S_MENOR_ENVOLVIDO.NEXTVAL; END IF; END;';
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='MENOR_ENVOLVIDO' AND COLUMN_NAME='ID_MENOR_STR';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE MENOR_ENVOLVIDO ADD (ID_MENOR_STR VARCHAR2(255))'; END IF;
  BEGIN EXECUTE IMMEDIATE 'UPDATE MENOR_ENVOLVIDO SET ID_MENOR_STR = RAWTOHEX(SYS_GUID()) WHERE ID_MENOR_STR IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE MENOR_ENVOLVIDO ADD CONSTRAINT UK_MENOR_IDSTR UNIQUE (ID_MENOR_STR)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- =============================
-- FILHOS: adicionar colunas numéricas e FKs paralelas
-- =============================

-- AUTO_INFRACAO: ESTABELECIMENTO_ID e RESPONSAVEL_ID (numéricos)
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO' AND COLUMN_NAME='ESTABELECIMENTO_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO ADD (ESTABELECIMENTO_ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO' AND COLUMN_NAME='RESPONSAVEL_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO ADD (RESPONSAVEL_ID NUMBER(19))'; END IF;
  -- Backfill a partir de colunas string se existirem
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO' AND COLUMN_NAME='ID_ESTABELECIMENTO';
  IF v>0 THEN
    BEGIN EXECUTE IMMEDIATE 'UPDATE AUTO_INFRACAO ai SET ESTABELECIMENTO_ID = (SELECT e.ID FROM ESTABELECIMENTO e WHERE e.ID_ESTABELECIMENTO_STR = ai.ID_ESTABELECIMENTO) WHERE ESTABELECIMENTO_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO' AND COLUMN_NAME='ID_RESPONSAVEL';
  IF v>0 THEN
    BEGIN EXECUTE IMMEDIATE 'UPDATE AUTO_INFRACAO ai SET RESPONSAVEL_ID = (SELECT r.ID FROM RESPONSAVEL r WHERE r.ID_RESPONSAVEL_STR = ai.ID_RESPONSAVEL) WHERE RESPONSAVEL_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF;
  -- FKs paralelas
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO ADD CONSTRAINT FK_AUTO_ESTAB_NUM FOREIGN KEY (ESTABELECIMENTO_ID) REFERENCES ESTABELECIMENTO(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO ADD CONSTRAINT FK_AUTO_RESP_NUM  FOREIGN KEY (RESPONSAVEL_ID)     REFERENCES RESPONSAVEL(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- MENOR_ENVOLVIDO: AUTO_INFRACAO_ID numérico
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='MENOR_ENVOLVIDO' AND COLUMN_NAME='AUTO_INFRACAO_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE MENOR_ENVOLVIDO ADD (AUTO_INFRACAO_ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='MENOR_ENVOLVIDO' AND COLUMN_NAME='ID_AUTO_INFRACAO';
  IF v>0 THEN
    BEGIN EXECUTE IMMEDIATE 'UPDATE MENOR_ENVOLVIDO m SET AUTO_INFRACAO_ID = (SELECT a.ID FROM AUTO_INFRACAO a WHERE a.ID_AUTO_INFRACAO_STR = m.ID_AUTO_INFRACAO) WHERE AUTO_INFRACAO_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END;
  END IF;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE MENOR_ENVOLVIDO ADD CONSTRAINT FK_MENOR_AUTO_NUM FOREIGN KEY (AUTO_INFRACAO_ID) REFERENCES AUTO_INFRACAO(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- AUTO_INFRACAO_TESTEMUNHA: AUTO_ID e TESTEMUNHA_ID numéricos
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO_TESTEMUNHA' AND COLUMN_NAME='AUTO_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO_TESTEMUNHA ADD (AUTO_ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO_TESTEMUNHA' AND COLUMN_NAME='TESTEMUNHA_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO_TESTEMUNHA ADD (TESTEMUNHA_ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO_TESTEMUNHA' AND COLUMN_NAME='ID_AUTO_INFRACAO';
  IF v>0 THEN BEGIN EXECUTE IMMEDIATE 'UPDATE AUTO_INFRACAO_TESTEMUNHA t SET AUTO_ID = (SELECT a.ID FROM AUTO_INFRACAO a WHERE a.ID_AUTO_INFRACAO_STR = t.ID_AUTO_INFRACAO) WHERE AUTO_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='AUTO_INFRACAO_TESTEMUNHA' AND COLUMN_NAME='ID_TESTEMUNHA';
  IF v>0 THEN BEGIN EXECUTE IMMEDIATE 'UPDATE AUTO_INFRACAO_TESTEMUNHA t SET TESTEMUNHA_ID = (SELECT x.ID FROM TESTEMUNHA x WHERE x.ID_TESTEMUNHA_STR = t.ID_TESTEMUNHA) WHERE TESTEMUNHA_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END; END IF;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO_TESTEMUNHA ADD CONSTRAINT FK_AIT_AUTO_NUM FOREIGN KEY (AUTO_ID) REFERENCES AUTO_INFRACAO(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE AUTO_INFRACAO_TESTEMUNHA ADD CONSTRAINT FK_AIT_TEST_NUM FOREIGN KEY (TESTEMUNHA_ID) REFERENCES TESTEMUNHA(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- ANEXO_AUTO_INFRACAO: AUTO_INFRACAO_ID numérico
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='ANEXO_AUTO_INFRACAO' AND COLUMN_NAME='AUTO_INFRACAO_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE ANEXO_AUTO_INFRACAO ADD (AUTO_INFRACAO_ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='ANEXO_AUTO_INFRACAO' AND COLUMN_NAME='ID_AUTO_INFRACAO';
  IF v>0 THEN BEGIN EXECUTE IMMEDIATE 'UPDATE ANEXO_AUTO_INFRACAO t SET AUTO_INFRACAO_ID = (SELECT a.ID FROM AUTO_INFRACAO a WHERE a.ID_AUTO_INFRACAO_STR = t.ID_AUTO_INFRACAO) WHERE AUTO_INFRACAO_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END; END IF;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE ANEXO_AUTO_INFRACAO ADD CONSTRAINT FK_ANEXO_AUTO FOREIGN KEY (AUTO_INFRACAO_ID) REFERENCES AUTO_INFRACAO(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- LOG_AUDITORIA_AUTO_INFRACAO: AUTO_INFRACAO_ID numérico
DECLARE v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='LOG_AUDITORIA_AUTO_INFRACAO' AND COLUMN_NAME='AUTO_INFRACAO_ID';
  IF v=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE LOG_AUDITORIA_AUTO_INFRACAO ADD (AUTO_INFRACAO_ID NUMBER(19))'; END IF;
  SELECT COUNT(*) INTO v FROM USER_TAB_COLS WHERE TABLE_NAME='LOG_AUDITORIA_AUTO_INFRACAO' AND COLUMN_NAME='ID_AUTO_INFRACAO';
  IF v>0 THEN BEGIN EXECUTE IMMEDIATE 'UPDATE LOG_AUDITORIA_AUTO_INFRACAO t SET AUTO_INFRACAO_ID = (SELECT a.ID FROM AUTO_INFRACAO a WHERE a.ID_AUTO_INFRACAO_STR = t.ID_AUTO_INFRACAO) WHERE AUTO_INFRACAO_ID IS NULL'; EXCEPTION WHEN OTHERS THEN NULL; END; END IF;
  BEGIN EXECUTE IMMEDIATE 'ALTER TABLE LOG_AUDITORIA_AUTO_INFRACAO ADD CONSTRAINT FK_LOGAI_AUTO FOREIGN KEY (AUTO_INFRACAO_ID) REFERENCES AUTO_INFRACAO(ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- Índices de apoio para FKs (idempotentes)
BEGIN
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AIN_EST01 ON AUTO_INFRACAO (ESTABELECIMENTO_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AIN_RES01 ON AUTO_INFRACAO (RESPONSAVEL_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_MEN_AIN01 ON MENOR_ENVOLVIDO (AUTO_INFRACAO_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AIT_AIN01 ON AUTO_INFRACAO_TESTEMUNHA (AUTO_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AIT_TES01 ON AUTO_INFRACAO_TESTEMUNHA (TESTEMUNHA_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_ANX_AIN01 ON ANEXO_AUTO_INFRACAO (AUTO_INFRACAO_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_LAI_AIN01 ON LOG_AUDITORIA_AUTO_INFRACAO (AUTO_INFRACAO_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

