-- TJMG Standardization: Create explicit FK indexes and rename/create TR_BIR_<ALIAS>01 triggers
-- Idempotent script. Does not drop data or columns.

-- =============================
-- Helpers
-- =============================
-- Create index if missing
CREATE OR REPLACE PROCEDURE PR_CREATE_INDEX_IF_MISSING(p_index IN VARCHAR2, p_sql IN CLOB) AS
  v_cnt INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM user_indexes WHERE index_name = UPPER(p_index);
  IF v_cnt = 0 THEN EXECUTE IMMEDIATE p_sql; END IF;
END;
/

-- Drop trigger if exists
CREATE OR REPLACE PROCEDURE PR_DROP_TRIGGER_IF_EXISTS(p_trigger IN VARCHAR2) AS
  v_cnt INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM user_triggers WHERE trigger_name = UPPER(p_trigger);
  IF v_cnt > 0 THEN EXECUTE IMMEDIATE 'DROP TRIGGER '||p_trigger; END IF;
END;
/

-- Ensure sequence exists (defensive)
CREATE OR REPLACE PROCEDURE PR_ENSURE_SEQ(p_seq IN VARCHAR2) AS v INTEGER; BEGIN
  SELECT COUNT(*) INTO v FROM user_sequences WHERE sequence_name=UPPER(p_seq);
  IF v=0 THEN EXECUTE IMMEDIATE 'CREATE SEQUENCE '||p_seq||' START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; END IF;
END;
/

-- =============================
-- FK indexes (I_FK_<ALIAS>_<REF>nn)
-- =============================
BEGIN
  -- AGENTE_COMARCA
  PR_CREATE_INDEX_IF_MISSING('I_FK_AGC_AGV01', 'CREATE INDEX I_FK_AGC_AGV01 ON AGENTE_COMARCA (AGENTE_ID)');
  PR_CREATE_INDEX_IF_MISSING('I_FK_AGC_COM01', 'CREATE INDEX I_FK_AGC_COM01 ON AGENTE_COMARCA (COMARCA_ID)');
  -- AGENTE_AREA_ATUACAO
  PR_CREATE_INDEX_IF_MISSING('I_FK_AAA_AGV01', 'CREATE INDEX I_FK_AAA_AGV01 ON AGENTE_AREA_ATUACAO (ID_AGENTE)');
  PR_CREATE_INDEX_IF_MISSING('I_FK_AAA_AAT01', 'CREATE INDEX I_FK_AAA_AAT01 ON AGENTE_AREA_ATUACAO (ID_AREA_ATUACAO)');
  -- CREDENCIAL
  PR_CREATE_INDEX_IF_MISSING('I_FK_CRE_AGV01', 'CREATE INDEX I_FK_CRE_AGV01 ON CREDENCIAL (ID_AGENTE)');
  -- AUTO_INFRACAO
  PR_CREATE_INDEX_IF_MISSING('I_FK_AIN_EST01', 'CREATE INDEX I_FK_AIN_EST01 ON AUTO_INFRACAO (ESTABELECIMENTO_ID)');
  PR_CREATE_INDEX_IF_MISSING('I_FK_AIN_RES01', 'CREATE INDEX I_FK_AIN_RES01 ON AUTO_INFRACAO (RESPONSAVEL_ID)');
  -- MENOR_ENVOLVIDO
  PR_CREATE_INDEX_IF_MISSING('I_FK_MEN_AIN01', 'CREATE INDEX I_FK_MEN_AIN01 ON MENOR_ENVOLVIDO (AUTO_INFRACAO_ID)');
  -- AUTO_INFRACAO_TESTEMUNHA
  PR_CREATE_INDEX_IF_MISSING('I_FK_AIT_AIN01', 'CREATE INDEX I_FK_AIT_AIN01 ON AUTO_INFRACAO_TESTEMUNHA (AUTO_ID)');
  PR_CREATE_INDEX_IF_MISSING('I_FK_AIT_TES01', 'CREATE INDEX I_FK_AIT_TES01 ON AUTO_INFRACAO_TESTEMUNHA (TESTEMUNHA_ID)');
  -- ANEXO_AUTO_INFRACAO
  PR_CREATE_INDEX_IF_MISSING('I_FK_ANX_AIN01', 'CREATE INDEX I_FK_ANX_AIN01 ON ANEXO_AUTO_INFRACAO (AUTO_INFRACAO_ID)');
  -- LOG_AUDITORIA_AUTO_INFRACAO
  PR_CREATE_INDEX_IF_MISSING('I_FK_LAI_AIN01', 'CREATE INDEX I_FK_LAI_AIN01 ON LOG_AUDITORIA_AUTO_INFRACAO (AUTO_INFRACAO_ID)');
END;
/

-- =============================
-- Triggers TR_BIR_<ALIAS>01 for tables with numeric PK sequences
-- Drops legacy TR_BI_* and TR_*_BI triggers and recreates named TR_BIR_*01
-- =============================
BEGIN
  -- Defensive: ensure sequences exist
  PR_ENSURE_SEQ('S_AGENTE_VOLUNTARIO');
  PR_ENSURE_SEQ('S_COMARCA');
  PR_ENSURE_SEQ('S_AREA_ATUACAO');
  PR_ENSURE_SEQ('S_CREDENCIAL');
  PR_ENSURE_SEQ('S_LOG_AUDITORIA');
  PR_ENSURE_SEQ('S_AUTO_INFRACAO');
  PR_ENSURE_SEQ('S_ANEXO_AUTO');
  PR_ENSURE_SEQ('S_ESTABELECIMENTO');
  PR_ENSURE_SEQ('S_RESPONSAVEL');
  PR_ENSURE_SEQ('S_MENOR_ENVOLVIDO');
  PR_ENSURE_SEQ('S_TESTEMUNHA');
  PR_ENSURE_SEQ('S_LOG_AUDITORIA_AUTO_INFRACAO');
END;
/

-- Drop legacy triggers if present
BEGIN
  -- TR_BI_* (legacy)
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_AGENTE_VOLUNTARIO');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_COMARCA');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_AREA_ATUACAO');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_CREDENCIAL');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_LOG_AUDITORIA');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_AUTO_INFRACAO');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_ANEXO_AUTO');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_ESTABELECIMENTO');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_RESPONSAVEL');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_MENOR');
  PR_DROP_TRIGGER_IF_EXISTS('TR_BI_TESTEMUNHA');
  -- TR_*_BI (from prior alignment scripts)
  PR_DROP_TRIGGER_IF_EXISTS('TR_AGENTE_VOLUNTARIO_BI');
  PR_DROP_TRIGGER_IF_EXISTS('TR_COMARCA_BI');
  PR_DROP_TRIGGER_IF_EXISTS('TR_ESTABELECIMENTO_BI');
  PR_DROP_TRIGGER_IF_EXISTS('TR_RESPONSAVEL_BI');
  PR_DROP_TRIGGER_IF_EXISTS('TR_TESTEMUNHA_BI');
END;
/

-- Recreate standardized triggers
CREATE OR REPLACE TRIGGER TR_BIR_AGV01
BEFORE INSERT ON AGENTE_VOLUNTARIO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_AGENTE_VOLUNTARIO.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_COM01
BEFORE INSERT ON COMARCA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_COMARCA.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_AAT01
BEFORE INSERT ON AREA_ATUACAO
FOR EACH ROW
BEGIN
  IF :NEW.ID_AREA_ATUACAO IS NULL THEN :NEW.ID_AREA_ATUACAO := S_AREA_ATUACAO.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_CRE01
BEFORE INSERT ON CREDENCIAL
FOR EACH ROW
BEGIN
  IF :NEW.ID_CREDENCIAL IS NULL THEN :NEW.ID_CREDENCIAL := S_CREDENCIAL.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_LOG01
BEFORE INSERT ON LOG_AUDITORIA
FOR EACH ROW
BEGIN
  IF :NEW.ID_LOG IS NULL THEN :NEW.ID_LOG := S_LOG_AUDITORIA.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_AIN01
BEFORE INSERT ON AUTO_INFRACAO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_AUTO_INFRACAO.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_ANX01
BEFORE INSERT ON ANEXO_AUTO_INFRACAO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_ANEXO_AUTO.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_EST01
BEFORE INSERT ON ESTABELECIMENTO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_ESTABELECIMENTO.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_RES01
BEFORE INSERT ON RESPONSAVEL
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_RESPONSAVEL.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_MEN01
BEFORE INSERT ON MENOR_ENVOLVIDO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_MENOR_ENVOLVIDO.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_TES01
BEFORE INSERT ON TESTEMUNHA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_TESTEMUNHA.NEXTVAL; END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_BIR_LAI01
BEFORE INSERT ON LOG_AUDITORIA_AUTO_INFRACAO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_LOG_AUDITORIA_AUTO_INFRACAO.NEXTVAL; END IF;
END;
/

