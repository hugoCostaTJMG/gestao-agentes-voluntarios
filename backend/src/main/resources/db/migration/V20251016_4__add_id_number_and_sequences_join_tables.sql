-- TJMG Standardization: Add surrogate numeric IDs to join tables
-- Tables: AGENTE_COMARCA, AGENTE_AREA_ATUACAO, AUTO_INFRACAO_TESTEMUNHA
-- Strategy (idempotent):
--  1) Add ID NUMBER column if missing
--  2) Create sequence S_<TABLE> if missing
--  3) Backfill ID values with sequence
--  4) Create trigger TR_BIR_<ALIAS>01 (Before Insert Row) to populate ID
--  5) Promote ID to PRIMARY KEY and add UNIQUE on business columns
--  6) Add indexes for FKs (kept lightweight here; full FK indexes handled in a later script)

-- =============================
-- Helpers
-- =============================
-- Drops PK constraint by name if present
CREATE OR REPLACE PROCEDURE PR_DROP_PK_IF_EXISTS(p_table IN VARCHAR2) AS
  v_pk_name VARCHAR2(128);
BEGIN
  SELECT constraint_name INTO v_pk_name
    FROM user_constraints
   WHERE table_name = UPPER(p_table)
     AND constraint_type = 'P';
  EXECUTE IMMEDIATE 'ALTER TABLE '||p_table||' DROP CONSTRAINT '||v_pk_name;
EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN NULL; END;
/

-- Create sequence if missing
CREATE OR REPLACE PROCEDURE PR_CREATE_SEQ_IF_MISSING(p_seq IN VARCHAR2) AS
  v_cnt INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM user_sequences WHERE sequence_name = UPPER(p_seq);
  IF v_cnt = 0 THEN
    EXECUTE IMMEDIATE 'CREATE SEQUENCE '||p_seq||' START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE';
  END IF;
END;
/

-- Add column if missing
CREATE OR REPLACE PROCEDURE PR_ADD_COL_ID_IF_MISSING(p_table IN VARCHAR2) AS
  v_cnt INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM user_tab_cols WHERE table_name=UPPER(p_table) AND column_name='ID';
  IF v_cnt = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE '||p_table||' ADD (ID NUMBER(19))';
  END IF;
END;
/

-- Backfill IDs with sequence
CREATE OR REPLACE PROCEDURE PR_BACKFILL_ID_WITH_SEQ(p_table IN VARCHAR2, p_seq IN VARCHAR2) AS
BEGIN
  EXECUTE IMMEDIATE 'UPDATE '||p_table||' SET ID = '||p_seq||'.NEXTVAL WHERE ID IS NULL';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Ensure unique constraint exists
CREATE OR REPLACE PROCEDURE PR_ADD_UNIQUE_IF_MISSING(
  p_table IN VARCHAR2,
  p_constraint IN VARCHAR2,
  p_cols IN VARCHAR2
) AS v_cnt INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM user_constraints WHERE table_name=UPPER(p_table) AND constraint_name=UPPER(p_constraint) AND constraint_type='U';
  IF v_cnt = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE '||p_table||' ADD CONSTRAINT '||p_constraint||' UNIQUE ('||p_cols||')';
  END IF;
END;
/

-- Add PK(ID) if missing
CREATE OR REPLACE PROCEDURE PR_ADD_PK_ID_IF_MISSING(p_table IN VARCHAR2, p_pk_name IN VARCHAR2) AS
  v_cnt INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM user_constraints WHERE table_name=UPPER(p_table) AND constraint_type='P';
  IF v_cnt = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE '||p_table||' ADD CONSTRAINT '||p_pk_name||' PRIMARY KEY (ID)';
  END IF;
END;
/

-- =============================
-- AGENTE_COMARCA (Alias: AGC)
-- =============================
BEGIN PR_ADD_COL_ID_IF_MISSING('AGENTE_COMARCA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_CREATE_SEQ_IF_MISSING('S_AGENTE_COMARCA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_BACKFILL_ID_WITH_SEQ('AGENTE_COMARCA','S_AGENTE_COMARCA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
-- Replace any previous row-level insert trigger for this ID (drop if exists)
BEGIN
  BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TR_BIR_AGC01'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/
CREATE OR REPLACE TRIGGER TR_BIR_AGC01
BEFORE INSERT ON AGENTE_COMARCA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_AGENTE_COMARCA.NEXTVAL; END IF;
END;
/

-- Promote ID as PK and keep pair unique
BEGIN PR_DROP_PK_IF_EXISTS('AGENTE_COMARCA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_ADD_PK_ID_IF_MISSING('AGENTE_COMARCA','PK_AGENTE_COMARCA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_ADD_UNIQUE_IF_MISSING('AGENTE_COMARCA','UK_AGC_U1','AGENTE_ID, COMARCA_ID'); EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- =============================
-- AGENTE_AREA_ATUACAO (Alias: AAA)
-- =============================
BEGIN PR_ADD_COL_ID_IF_MISSING('AGENTE_AREA_ATUACAO'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_CREATE_SEQ_IF_MISSING('S_AGENTE_AREA_ATUACAO'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_BACKFILL_ID_WITH_SEQ('AGENTE_AREA_ATUACAO','S_AGENTE_AREA_ATUACAO'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TR_BIR_AAA01'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/
CREATE OR REPLACE TRIGGER TR_BIR_AAA01
BEFORE INSERT ON AGENTE_AREA_ATUACAO
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_AGENTE_AREA_ATUACAO.NEXTVAL; END IF;
END;
/

BEGIN PR_DROP_PK_IF_EXISTS('AGENTE_AREA_ATUACAO'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_ADD_PK_ID_IF_MISSING('AGENTE_AREA_ATUACAO','PK_AGENTE_AREA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_ADD_UNIQUE_IF_MISSING('AGENTE_AREA_ATUACAO','UK_AAA_U1','ID_AGENTE, ID_AREA_ATUACAO'); EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- =============================
-- AUTO_INFRACAO_TESTEMUNHA (Alias: AIT)
-- =============================
BEGIN PR_ADD_COL_ID_IF_MISSING('AUTO_INFRACAO_TESTEMUNHA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_CREATE_SEQ_IF_MISSING('S_AUTO_INFRACAO_TESTEMUNHA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_BACKFILL_ID_WITH_SEQ('AUTO_INFRACAO_TESTEMUNHA','S_AUTO_INFRACAO_TESTEMUNHA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TR_BIR_AIT01'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/
CREATE OR REPLACE TRIGGER TR_BIR_AIT01
BEFORE INSERT ON AUTO_INFRACAO_TESTEMUNHA
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN :NEW.ID := S_AUTO_INFRACAO_TESTEMUNHA.NEXTVAL; END IF;
END;
/

BEGIN PR_DROP_PK_IF_EXISTS('AUTO_INFRACAO_TESTEMUNHA'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_ADD_PK_ID_IF_MISSING('AUTO_INFRACAO_TESTEMUNHA','PK_AIT'); EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN PR_ADD_UNIQUE_IF_MISSING('AUTO_INFRACAO_TESTEMUNHA','UK_AIT_U1','AUTO_ID, TESTEMUNHA_ID'); EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- =============================
-- Optional FK indexes on join table FKs (some will be added again in next script with naming convention)
-- Kept here minimal for performance; the canonical names come next.
BEGIN
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AGC_AGV01 ON AGENTE_COMARCA (AGENTE_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AGC_COM01 ON AGENTE_COMARCA (COMARCA_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AAA_AGV01 ON AGENTE_AREA_ATUACAO (ID_AGENTE)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AAA_AAT01 ON AGENTE_AREA_ATUACAO (ID_AREA_ATUACAO)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AIT_AIN01 ON AUTO_INFRACAO_TESTEMUNHA (AUTO_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
  BEGIN EXECUTE IMMEDIATE 'CREATE INDEX I_FK_AIT_TES01 ON AUTO_INFRACAO_TESTEMUNHA (TESTEMUNHA_ID)'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

