# Configuração da aplicação
spring.application.name=sistema-agentes-voluntarios

# Configuração do servidor
server.port=8080
server.servlet.context-path=/

# Configuração do banco de dados Oracle (OCI)
spring.datasource.url=jdbc:oracle:thin:@//${ORACLE_DB_HOST:-localhost}:${ORACLE_DB_PORT:1521}/${ORACLE_DB_SERVICE:XEPDB1}
spring.datasource.username=${ORACLE_DB_USER:agentes_user}
spring.datasource.password=${ORACLE_DB_PASSWORD:agentes_pass}
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.properties.hibernate.default_schema=${ORACLE_DB_SCHEMA:AGENTES_USER}

# Configuração específica para Oracle Cloud Database
spring.datasource.hikari.connection-init-sql=ALTER SESSION SET CURRENT_SCHEMA=${ORACLE_DB_SCHEMA:AGENTES_USER}
spring.datasource.hikari.data-source-properties.oracle.net.CONNECT_TIMEOUT=60000
spring.datasource.hikari.data-source-properties.oracle.net.READ_TIMEOUT=60000
spring.datasource.hikari.data-source-properties.oracle.jdbc.ReadTimeout=60000

# Configuração do JPA/Hibernate para Oracle
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ==========================
# Flyway Migrations
# ==========================
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.schemas=${ORACLE_DB_SCHEMA:AGENTES_USER}
spring.flyway.default-schema=${ORACLE_DB_SCHEMA:AGENTES_USER}
# Permite baselining em bases já existentes
spring.flyway.baseline-on-migrate=true

# Configuração do pool de conexões para OCI
spring.datasource.hikari.maximum-pool-size=${DB_POOL_MAX_SIZE:20}
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${DB_MAX_LIFETIME:1800000}
spring.datasource.hikari.leak-detection-threshold=${DB_LEAK_DETECTION:60000}

# ==========================
# Configuração do OAuth2/Keycloak
# ==========================
# URLs públicas (acessíveis pelo navegador) e internas (acessíveis pelos containers)
keycloak.public-base-url=${KEYCLOAK_PUBLIC_BASE_URL:http://localhost:8084/auth}
keycloak.internal-base-url=${KEYCLOAK_INTERNAL_BASE_URL:http://keycloak:8080/auth}
keycloak.realm=${KEYCLOAK_REALM:tjmg}

# Resource Server (validação do JWT no backend)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.public-base-url}/realms/${keycloak.realm}
app.security.override-issuer-uri=${keycloak.public-base-url}/realms/${keycloak.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${keycloak.internal-base-url}/realms/${keycloak.realm}/protocol/openid-connect/certs

# OAuth2 Client (Keycloak) - login realizado no backend
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID:agentes-voluntarios}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET:changeme}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
## Evite discovery por issuer
# Authorization endpoint é acessado pelo navegador (usar URL pública)
spring.security.oauth2.client.provider.keycloak.authorization-uri=${KEYCLOAK_AUTH_URI_PUBLIC:${keycloak.public-base-url}/realms/${keycloak.realm}/protocol/openid-connect/auth}
# Endpoints chamados pelo backend (usar URL interna do Docker)
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_TOKEN_URI_INTERNAL:${keycloak.internal-base-url}/realms/${keycloak.realm}/protocol/openid-connect/token}
spring.security.oauth2.client.provider.keycloak.user-info-uri=${KEYCLOAK_USERINFO_URI_INTERNAL:${keycloak.internal-base-url}/realms/${keycloak.realm}/protocol/openid-connect/userinfo}
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${KEYCLOAK_JWKS_URI_INTERNAL:${keycloak.internal-base-url}/realms/${keycloak.realm}/protocol/openid-connect/certs}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# Para onde redirecionar o usuário após login/logout (frontend)
# Em ambientes com Nginx na porta 80, use http://localhost:80/login
app.frontend.redirect-uri=${FRONTEND_REDIRECT_URI:http://localhost:80/login}

# Configuração de CORS
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:4200,https://agentes.tjmg.jus.br,http://localhost}
app.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true

# Configuração da aplicação
app.base-url=${APP_BASE_URL:https://agentes.tjmg.jus.br}
app.dev-base-url=${APP_DEV_BASE_URL:http://localhost:8080}
app.environment=${APP_ENVIRONMENT:production}

# Diretório local para uploads de anexos (RN009)
app.uploads.dir=${UPLOADS_DIR:uploads}

# Configuração de logs para OCI
logging.level.br.gov.corregedoria.agentes=${LOG_LEVEL:INFO}
logging.level.oracle.jdbc=${ORACLE_LOG_LEVEL:WARN}
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId}] %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId}] %logger{36} - %msg%n

# Configuração do Actuator para OCI Monitoring
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=${APP_ENVIRONMENT:production}

# Configuração de timeout de sessão
server.servlet.session.timeout=${SESSION_TIMEOUT:15m}

# Configuração de upload de arquivos para OCI Object Storage
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:10MB}

# Configuração de cache
spring.cache.type=simple

# Configuração de internacionalização
spring.messages.basename=messages
spring.messages.encoding=UTF-8


# Configuração OCI Object Storage para anexos
oci.object-storage.namespace=${OCI_NAMESPACE:}
oci.object-storage.bucket-name=${OCI_BUCKET_NAME:agentes-anexos}
oci.object-storage.region=${OCI_REGION:sa-saopaulo-1}
oci.auth.config-file-path=${OCI_CONFIG_PATH:/app/.oci/config}
oci.auth.profile=${OCI_PROFILE:DEFAULT}

# Configuração OCI Vault para secrets
oci.vault.secret-id.db-password=${OCI_VAULT_DB_PASSWORD_SECRET_ID:}

# Configuração de observabilidade OCI
management.tracing.enabled=true
management.tracing.sampling.probability=0.1
management.zipkin.tracing.endpoint=${ZIPKIN_ENDPOINT:http://zipkin:9411/api/v2/spans}

# Configuração de segurança adicional
server.ssl.enabled=${SSL_ENABLED:false}
server.ssl.key-store=${SSL_KEYSTORE_PATH:}
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:}
server.ssl.key-store-type=PKCS12

# Logs de debug para Spring Security
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web=DEBUG
